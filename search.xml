<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[【教程】Hexo+Coding搭建自己的博客网站系列5-Next6.7版本主题深度美化]]></title>
    <url>%2F2019%2F01%2F21%2F%E3%80%90%E6%95%99%E7%A8%8B%E3%80%91Hexo%2BCoding%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E7%B3%BB%E5%88%975-Next6.7%E7%89%88%E6%9C%AC%E4%B8%BB%E9%A2%98%E6%B7%B1%E5%BA%A6%E7%BE%8E%E5%8C%96%2F</url>
    <content type="text"><![CDATA[在我进行主题优化的时候，参考了网上很多文章，但是随着Next版本的变迁，越来越多个性化设置已经被集成到Next中。所以我写了这篇关于Next6.7版本主题优化的方案。有时间和精力的话，这篇文章也会随着Next版本变迁持续更新. 主题优化 本文中介绍的主题优化主要是以下14种 添加动态背景 修改文章内链接文本样式 文章不展示全文显示摘要 修改文章底部的那个带#号的标签 在每篇文章末尾统一添加“本文结束”标记 修改作者头像并旋转 修改代码块自定义样式 侧边栏社交设置和友情链接 增加页面阅读统计,字数统计,阅读时长 设置网站的图标Favicon 在文章底部增加版权信息 添加Valine评论系统 点击爆炸效果 内容页里的代码块新增复制按钮 添加动态背景在主题配置文件中找到1234567canvas_nest: enable: true onmobile: true # display on mobile or not color: '0,0,255' # RGB values, use ',' to separate opacity: 0.5 # the opacity of line: 0~1 zIndex: -1 # z-index property of the background count: 90 # the number of lines 将enable改为true即可。如果还想要实现波浪的等背景，首先需要在站点目录下打开Git bash，键入命令git clone https://github.com/theme-next/theme-next-three source/lib/three然后还是在主题配置文件next/_config.yml中找到1234567891011# JavaScript 3D library.# Dependencies: https://github.com/theme-next/theme-next-three# three_waves# 点点波浪(像海面)cpu占用极高three_waves: true# canvas_lines# 点线几何体,占用最低(还是高)canvas_lines: false# canvas_sphere# 球上凸点(柱?)占用高canvas_sphere: false 想用哪一个就将其设置为true即可。 修改文章内链接文本样式具体方法是修改文件themes\next\source\css\_common\components\post\post.styl，在末尾添加1234567891011// 文章内链接文本样式.post-body p a&#123; color: #0593d3; border-bottom: none; border-bottom: 1px solid #0593d3; &amp;:hover &#123; color: #fc6423; border-bottom: none; border-bottom: 1px solid #fc6423; &#125;&#125; 其中选择.post-body是为了不影响标题，a是为了不影响”阅读全文“的显示样式。 文章不展示全文显示摘要修改/themes/next/_config.yml中1234567scroll_to_more: true #如果文章有摘要,会自动滚动到摘要下面save_scroll: true #通过cookies来缓存阅读进度excerpt_description: true #自动摘录描述作为序言auto_excerpt: #设置阅读全文 enable: true length: 150 #摘要次数read_more_btn: true #阅读全文按钮 修改文章底部的那个带#号的标签修改模板/themes/next/layout/_macro/post.swig，搜索rel=&quot;tag&quot;&gt;#，将 # 换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;,tag的更多设置在themes/next/source/css/_common/components/tag-cloud.styl中可以修改样式123456789101112.tag-cloud &#123; //设置标签 text-align: center; //展示位置，左、中、右 a &#123; display: inline-block; margin: 10px; //字体大小 &#125; a:hover &#123; color: $link-hover-color !important; &#125;&#125; 在每篇文章末尾统一添加“本文结束”标记在路径 \themes\next\layout\_macro 中新建 passage-end-tag.swig 文件,并添加以下内容：12345&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style="text-align:center;color: #ccc;font-size:14px;"&gt;-------------本文结束&lt;i class="fa fa-paw"&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt; 接着打开\themes\next\layout\_macro\post.swig文件，在post-body 之后， post-footer 之前添加如下画红色部分代码（post-footer之前两个DIV）： 修改作者头像并旋转位置在/themes/next/_config.yml12345avatar: url: /images/avatar.png #这里设置自己的头像 rounded: false opacity: 1 #不透明度 rotated: false #true为开启旋转 修改代码块自定义样式打开\themes\next\source\css\_custom\custom.styl,向里面加入：(颜色可以自己定义)123456789101112131415// Custom styles.code &#123; color: #ff7600; background: #fbf7f8; margin: 2px;&#125;// 大代码块的自定义样式.highlight, pre &#123; margin: 5px 0; padding: 5px; border-radius: 3px;&#125;.highlight, code, pre &#123; border: 1px solid #d6d6d6;&#125; 侧边栏社交设置和友情链接修改/themes/next/_config.yml1234567891011121314151617181920212223242526272829303132333435site_state: true# Social Links# Usage: `Key: permalink || icon`# Key is the link label showing to end users.# Value before `||` delimeter is the target permalink.# Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, globe icon will be loaded.social: CSDN: https://blog.csdn.net/Fitz1318 || copyright GitHub: https://github.com/Fitz1318 || github Zhihu: https://www.zhihu.com/people/fitz-99/activitiessocial_icons: #这里是上面社交链接的对应图标 enable: true CSDN: copyright Github: github Zhihu: zhihu icons_only: false transition: true# Follow me on GitHub banner in right-top corner.# Usage: `permalink || title`# Value before `||` delimeter is the target permalink.# Value after `||` delimeter is the title and aria-label name.#github_banner: https://github.com/Fitz1318 || Follow me on GitHub# Blog rolls #这里时设置一些相关链接 我这里设置了一些推荐阅读的网站#links_icon: linklinks_title: 实用网站#links_layout: blocklinks_layout: inlinelinks: W3Cschool: http://www.w3school.com.cn/ 改图宝: http://www.gaitubao.com/ 程序员的工具箱: https://tool.lu/ 增加页面阅读统计,字数统计,阅读时长在站点目录下键入命令npm install hexo-symbols-count-time --save,然后打开主题配置文件/themes/next/_config.yml搜索busuanzi_count并修改12345678busuanzi_count: enable: false #设true 开启 total_visitors: true #总阅读人数 uv数 total_visitors_icon: user #阅读总人数的图标 total_views: true #总阅读次数 pv数 total_views_icon: eye #阅读总次数的图标 post_views: true #开启内容阅读次数 post_views_icon: eye #内容页阅读数的图标 同时搜索并修改symbols_count_time123456symbols_count_time: #字数与阅读时间统计设置 separated_meta: true # false 会显示一行 item_text_post: true # 显示属性名称,设为false后只显示图标和统计数字,不显示属性的文字 item_text_total: true #底部footer是否显示字数统计属性文字 awl: 4 #计算字数的一个设置,没设置过 wpm: 275 #一分钟阅读的字数 最后在站点配置文件_config.yml中新增如下代码 12345678 #显示阅读时间symbols_count_time: #文章内是否显示 symbols: true time: true # 网页底部是否显示 total_symbols: true total_time: true 设置网站的图标Favicon 12345678910111213 favicon: #这里配置站点的站标 small: /images/plane.png medium: /images/plane.pngrss:footer: #网站的页脚设置 since: 2019 #网站的开始运行时间 # Icon between year and copyright info. icon: name: heart #年份和版权之间的图标 # If you want to animate the icon, set it to true. animated: true # Change the color of icon, using Hex Code. color: "ff0000" 在文章底部增加版权信息在/themes/next/_config.yml中搜索并修改1234creative_commons: #设置版权原创声明的地方 license: by-nc sidebar: false post: true 添加Valine评论系统点击官网leancloud注册账号,获取自己的appid,appkey,再看valine官网设置下自己的leancloud在祖逖配置文件中/themes/next/_config.yml修改1234567891011valine: enable: true # 开启评论 appid: ~~~ # 你的 leancloud 的 appid appkey: ~~~ # 你的 leancloud 的 appkey notify: false # 是否邮件推送 详情看 https://github.com/xCss/Valine/wiki verify: false # placeholder: Just go go # 评论框里的placeholder信息 avatar: mm # gravatar style guest_info: nick,mail,link # custom comment header pageSize: 10 # 一页显示的评论条数 visitor: false # 点击爆炸效果首先在themes/next/source/js/src里面建一个叫fireworks.js的文件，代码如下：1"use strict";function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color="#F00",a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:"easeOutExpo",update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:"linear",duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:"easeOutExpo",update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(".fireworks");if(canvasEl)&#123;var ctx=canvasEl.getContext("2d"),numberOfParticules=30,pointerX=0,pointerY=0,tap="mousedown",colors=["#FF1461","#18FF92","#5A87FF","#FBF38C"],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+"px",canvasEl.style.height=window.innerHeight+"px",canvasEl.getContext("2d").scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;"sidebar"!==e.target.id&amp;&amp;"toggle-sidebar"!==e.target.id&amp;&amp;"A"!==e.target.nodeName&amp;&amp;"IMG"!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener("resize",setCanvasSize,!1)&#125;"use strict";function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color="#F00",a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:"easeOutExpo",update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:"linear",duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:"easeOutExpo",update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(".fireworks");if(canvasEl)&#123;var ctx=canvasEl.getContext("2d"),numberOfParticules=30,pointerX=0,pointerY=0,tap="mousedown",colors=["#FF1461","#18FF92","#5A87FF","#FBF38C"],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+"px",canvasEl.style.height=window.innerHeight+"px",canvasEl.getContext("2d").scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;"sidebar"!==e.target.id&amp;&amp;"toggle-sidebar"!==e.target.id&amp;&amp;"A"!==e.target.nodeName&amp;&amp;"IMG"!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener("resize",setCanvasSize,!1)&#125;; 打开themes/next/layout/_layout.swig,在上面写下如下代码：12345&#123;% if theme.fireworks %&#125; &lt;canvas class="fireworks" style="position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;" &gt;&lt;/canvas&gt; &lt;script type="text/javascript" src="//cdn.bootcss.com/animejs/2.2.0/anime.min.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="/js/src/fireworks.js"&gt;&lt;/script&gt;&#123;% endif %&#125; 打开主题配置文件，在里面最后写下：fireworks: true 内容页里的代码块新增复制按钮打开主题配置文件，在里面搜索,并作适当修改123456789codeblock: # Manual define the border radius in codeblock # Leave it empty for the default 1 border_radius: # Add copy button on codeblock copy_button: #增加复制按钮开关 enable: true # Show text copy result show_result: true 参考文章：https://blog.csdn.net/marvinboy/article/details/83350437http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.htmlhttps://www.simon96.online/2018/10/12/hexo-tutorial/]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Coding搭建自己的博客网站系列4-加速Hexo博客]]></title>
    <url>%2F2019%2F01%2F19%2Ftitled%2F</url>
    <content type="text"><![CDATA[前言当我们创建好Hexo博客后，加载速度问题就需要被重视，在本文中提出了两种不同的加速方案，可以相互补充，让你的博客快如闪电。在这里要感谢reuixy：https://reuixiy.github.io/technology/computer/computer-aided-art/2018/05/30/speed-up-hexo.html本文还参考了这篇文章 https://blog.csdn.net/java_1996/article/details/86499625 加速方案一：利用gulp 4.0实现静态资源压缩gulp简介gulp是前端开发过程中一种基于流的代码构建工具，是自动化项目的构建利器；它不仅能对网站资源进行优化，而且在开发过程中很多重复的任务能够使用正确的工具自动完成；使用它，不仅可以很愉快的编写代码，而且大大提高我们的工作效率。gulp是基于Nodejs的自动任务运行器， 它能自动化地完成 前端代码的测试、检查、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。在这里我们主要使用压缩功能 插件安装 在站点根目录下使用Git bash 键入命令npm install gulp 键入命令npm install gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify --save安装这些功能模块 // 清理html123gulp-htmlmin // 压缩htmlgulp-minify-css // 压缩cssgulp-uglify // 混淆js 创建任务在站点根目录下新建gulpfile.js文件 123456789101112131415161718192021222324252627282930313233343536373839404142var gulp = require('gulp');//Plugins模块获取var minifycss = require('gulp-minify-css');var uglify = require('gulp-uglify');var htmlmin = require('gulp-htmlmin');var htmlclean = require('gulp-htmlclean');//压缩cssgulp.task('minify-css', function () &#123;return gulp.src('./public/**/*.css').pipe(minifycss()).pipe(gulp.dest('./public'));&#125;);//压缩htmlgulp.task('minify-html', function () &#123;return gulp.src('./public/**/*.html').pipe(htmlclean()).pipe(htmlmin(&#123;removeComments: true,minifyJS: true,minifyCSS: true,minifyURLs: true,&#125;)).pipe(gulp.dest('./public'))&#125;);//压缩js 不压缩min.jsgulp.task('minify-js', function () &#123;return gulp.src(['./public/**/*.js', '!./public/**/*.min.js']).pipe(uglify()).pipe(gulp.dest('./public'));&#125;);//4.0以前的写法//gulp.task('default', [ // 'minify-html', 'minify-css', 'minify-js'//]);//4.0以后的写法// 执行 gulp 命令时执行的任务gulp.task('default', gulp.parallel('minify-html', 'minify-css', function() &#123; // Do something after a, b, and c are finished.&#125;)); 我在这里遇到ES6和ES5冲突问题，所以没压缩js 使用hexo clean &amp;&amp; hexo g &amp;&amp; gulp，然后再本地测试：hexo s或者部署：hexo d加速方案二：InstantClick+hexo-service-worker+hexo-filter-optimizeinstantclick简单介绍在访问者点击一个链接之前，鼠标会悬停在链接上面，这两个事件之间通常有200ms~300ms的间隔，InstantClick 利用这个时间间隔预加载页面。这样当你点击页面的时候，其实页面已经加载到本地了，呈现当然也就会很快。instancklkick使用①去github上下载最新版instancklkick.js地址为https://github.com/dieulot/instantclick/tree/master/src，或者从我的百度云盘下载：链接：https://pan.baidu.com/s/1KY3oNuYarOxVmvp3-BeI9g提取码：cp8w②然后保存在~/blog/themes/next/source/js/src/下，并在~/blog/themes/next/layout/_layout.swig里添加代码1234+ &lt;script type="text/javascript" src= "/js/src/instantclick.js" data-no-instant&gt;&lt;/script&gt;+ &lt;script data-no-instant&gt;InstantClick.init();&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 相信你知道这是什么意思，怎么添加。去除顶部加载条：在~/blog/themes/next/source/css/_custom/custom.styl后面加下面代码123instantclick &#123; display: none;&#125; 可能会有一些问题，比如与 FancyBox、Google Analytics 等等的兼容问题，解决方法自行查看文档或 Google。在这里会出现图标不显示的问题，解决方案是在主题全局配置文件/blog/themes/next/_config.yml中搜索fontawesome,然后将其修改为fontawesome: //cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css即可解决图标不显示的问题。 安装hexo-filter-optimize和hexo-service-worker在站点目录下键入命令npm install hexo-service-worker hexo-filter-optimize --save,如果出现安装错误，可参考我的解决方案，链接为：https://blog.csdn.net/Fitz1318/article/details/86556013然后在站点配置文件blog/_config.yml中后面添加如下代码：123456789101112131415161718192021222324252627282930313233# offline config passed to sw-precache.service_worker: maximumFileSizeToCacheInBytes: 5242880 staticFileGlobs: - public/**/*.&#123;js,html,css,png,jpg,gif,svg,eot,ttf,woff,woff2&#125; stripPrefix: public verbose: truefilter_optimize: enable: true # remove static resource query string # - like `?v=1.0.0` remove_query_string: true # remove the surrounding comments in each of the bundled files remove_comments: true css: enable: true # bundle loaded css file into the one bundle: true # use a script block to load css elements dynamically delivery: true # make specific css content inline into the html page # - only support the full path # - default is ['css/main.css'] inlines: excludes: js: # bundle loaded js file into the one bundle: true excludes: # set the priority of this plugin, # lower means it will be executed first, default is 10 priority: 12 至此结束所有工作了。赶快部署查看效果吧。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>博客加速</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo文章中插入图片的方法]]></title>
    <url>%2F2019%2F01%2F19%2Fexo%E6%96%87%E7%AB%A0%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[前言我之前都是先在CSDN上写好要发布的文章，然后再导出为Markdown文件。然后我就直接将文件复制到_post文件夹下，就行depoly,发布到我的博客网站上，我自己在电脑上浏览是正常的，图片也都能正确的显示出来，但是今天有个评论说不显示图片。我换了手机浏览博客，果然不显示。 解决方法 设置站点配置_config.yml:将post_asset_folder: false改为post_asset_folder: true 安装插件:npm install https://github.com/CodeFalling/hexo-asset-image -- save 运行hexo n &quot;XXXXXX&quot;,生成XXXXX.md博文时就会在/source/_posts目录下生成XXXXXX的文件夹，将你想在XXXXX博文中插入的照片放置到这个同名文件夹中即可，图片的命名随意。 添加图片:在想添加的位置写入![](图片名字.图片格式),例如![](1.png)。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Coding搭建自己的博客网站系列3-详述站点全局配置文件]]></title>
    <url>%2F2019%2F01%2F18%2FHexo-Coding%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E7%B3%BB%E5%88%973-%E8%AF%A6%E8%BF%B0%E7%AB%99%E7%82%B9%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[Hexo 目录如下图这是Blog文件的目录。从上到下依次解释 node_modules:hexo整个项目的环境依赖，hexo初始化时自动生成的。 public:存放的是整个项目的页面，样式，及逻辑代码。 scaffolds:scaffolds是脚手架的意思，当你新建一篇文章(hexo new page ‘title’)的时候，hexo是根据这个目录下的文件进行构建的。 source:这个目录很重要，新建的文章都是在保存在这个目录下的_posts 。_posts 目录下是一个个 markdown 文件。 themes:是网站的主题目录，Hexo有很好的主题扩展能力，开源主题也很丰富，该目录下每一个子目录就是一个主题。 _config.yml:站点全局配置文件。 站点全局配置文件 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: 七七的旧夏天 #网站主标题subtitle: #网站副标题description: 热爱生活，珍惜每一天 #网站描述keywords: 客观、理智、冷静 #关键字author: Fitz #作者language: zh_CN #语言timezone: #网站时区。默认使用您电脑的时区# URLurl: https://fitz1318.top #你的站点urlroot: / #站点的根目录permalink: :year/:month/:day/:title/ #文章的永久链接格式permalink_defaults: #永久链接中各部分的默认值# Directorysource_dir: source #资源文件夹，这个文件夹用来存放内容public_dir: public #公共文件夹，这个文件夹用于存放生成的站点文件tag_dir: tags #标签文件夹archive_dir: archives #归档文件夹category_dir: categories #分类文件夹code_dir: downloads/code #Include code 文件夹i18n_dir: :lang #国际化（il8n)文件夹skip_render: README.md #跳过指定文件的渲染# Writingnew_post_name: :title.md #新文章的文件名称default_layout: post #预设布局titlecase: false #把标题转换成titlecaseexternal_link: true #在新标签中打开链接filename_case: 0 #把文件名称转换成（1）小写（2）大写render_drafts: false #是否显示草稿post_asset_folder: false #是否启动Asset文件夹relative_link: false #把链接改为与根目录的相对位址future: true #显示未来的文章highlight: #内容中代码块的设置 enable: true line_number: true auto_detect: true tab_replace: # Home page settingindex_generator: path: '' per_page: 10 #每页显示的文章数量 order_by: -date #文章排序规则 # Category &amp; Tagdefault_category: uncategorized #默认分类category_map: #分类别名tag_map: #标签别名# Date / Time formatdate_format: YYYY-MM-DD #日期格式time_format: HH:mm:ss #时间格式# Paginationper_page: 10 #分页数量pagination_dir: page# Extensionstheme: next #主题名称# Deploymentdeploy: #部署部分的设置 type: git #部署类型 repo: git@git.coding.net:fitz1318/Fitz1318.git #部署仓库地址 #git@github.com:Fitz1318/Fitz1318.github.io.git baranch: master]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Coding搭建自己的博客网站系列2-部署博客到Coding]]></title>
    <url>%2F2019%2F01%2F18%2FHexo-Coding%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E7%B3%BB%E5%88%972-%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2%E5%88%B0Coding%2F</url>
    <content type="text"><![CDATA[前言最初，我是选择部署到Github上的，但是最后在弄百度收录时出现了问题，Github Pages屏蔽了百度爬虫，这样子你的博客就没办法被百度收录了。 注册并新建仓库Coding的网址 ，点击进去注册一个账号，然后新建一个仓库新建一个名为yourname.coding.me的项目，其中这里的yourname最好是coding注册时的username，等项目部署成功后它就是你博客的访问地址。 开启Pages服务如下图所示依次点击代码-&gt; Pages服务，开启后我们就可以通过 用户名+网站后缀来访问博客，而且还可以绑定域名通过固定域名来访问 连接到 Coding在管理Git项目时，无论是GitHub还是Coding我们可以通过SSH、HTTPS两种方式来clone或者push代码，当使用HTTPS的方式来管理代码，每次操作时都需要验证用户名和密码；而使用SSH方式Push代码之前需要配置个人的SSH key,这样就可以省掉繁琐的验证步骤。 配置SSH key以下命令均在Git bash下运行 检查你的电脑是否已经有了SSH Key12 cd ~/.sshls 如果该目录下存在id_rsa.pub或id_dsa.pub文件,那么直接进行第三步 创建一个SSH Key键入命令ssh-keygen -t rsa -C &quot;username&quot;,运行命令后会让你输入一个文件名，用于保存刚才生成的SSH key代码Generating public/private rsa key pair. Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]此处我们直接按下回车使用默认文件名创建，那么就会生成id_rsa和id_rsa.pub两个秘钥文件。接着又会提示你输入两次密码（该密码是你push文件的时候要输入的密码，而不是Coding管理者的密码），当然，你也可以不输入密码，直接按回车。那么push的时候就不需要输入密码，直接提交到Git服务器上了. 在Coding中配置SSH key在刚才生成的文件夹中找到id_rsa.pub,用记事本打开后全选复制。打开浏览器，进入我们Coding的工作台，账户-&gt;SSH公钥，按如下操作，将生成的SSH key添加 部署发布项目在我们创建的博客项目工作空间中找到_config.yml文件，打开后翻到最后面，进行设置，主要以这里要换成你的项目名称。 12345deploy: type: git repo: git@git.coding.net:fitz1318/Fitz1318.git #repo: git@github.com:Fitz1318/Fitz1318.github.io.git baranch: master 保存后关闭。在项目当前目录打开Git Bash ，因为项目的部署会用到hexo-deployer-git，所以先安装该插件,键入命令npm install hexo-deployer-git --save安装完成后继续键入命令素质三连hexo clean &amp;&amp; hexo g &amp;&amp; hexo d,等待完成，这时候在浏览器输入网址https://youname.coding.me，例如我的是https://fitz1318.coding.me。就可以看到自己的博客网站了。 结束语至此，部署博客到Coding上就完成了。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Coding搭建自己的博客网站系列1-本地环境部署]]></title>
    <url>%2F2019%2F01%2F17%2FHexo-Coding%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99%E7%B3%BB%E5%88%971-%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2%2F</url>
    <content type="text"><![CDATA[前言 最近我终于实现了自己很久之前关于搭建自己专属的博客网站的目标，现在把搭建期间的过程和走过的坑记录下来，如果你对搭建自己的网站有兴趣，不妨可以参考一下我的文章。首先我说下自己的版本hexo 3.8.0,Next 6.7.0,本地环境部署需要做以下几件事 安装Node.js: Node.js安装包下载地址，选择安装位置，然后安装时一直点next即可。 安装Git: Git安装包下载地址,选择安装位置，然后安装时一直点next即可。 安装Hexo:设置全局淘宝源，键入命令 npm config set registry https://registry.npm.taobao.org这样就可以加速下载,然后键入命令npm install -g hexo-cli,等待安装完成，至此Hexo的环境就搭建好了。 博客初始化：在电脑的适当位置，我选择安装到F盘，然后右键选择Git bash，如下图所示键入命令hexo init Blog新建完成后，在路径下会产生下列这些文件夹和文件1234567├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 在这里统一说一下站点配置文件即 _config.yml，主题配置文件即Blog\themes\主题文件夹\_config.yml（我这里是Next主题即为Blog\themes\next\_config.yml) 本地访问:点击Blog，然后右键选择Git bash here，如下图所示 键入启动命令hexo s，然后浏览器访问http://localhost:4000/，会出现下图至此本地环境部署结束。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[POJ2586]]></title>
    <url>%2F2019%2F01%2F14%2FPOJ2586%2F</url>
    <content type="text"><![CDATA[题目链接:http://poj.org/problem?id=2586 大致题意：已知一个公司在某一年中，每个月要么固定盈利s、要么固定亏损d。 但是具体哪个月盈利、哪个月亏损却不得而知。不过可以肯定的是，这一年中，任意的连续5个月盈亏和必定是亏损。 问这年是否存在盈利的可能，若可能盈利，输出最大的盈利额，若不存在盈利，输出”Deficit”。 解题思路： ①假设所有的月均为盈利，判断第一个连续五月是亏损，如果不亏损，将最后一个月设为亏损，再次判断如果仍亏损的话让倒数第二个月设为亏损。。直到满足情况为止。 ②依次判断8个连续的五月，最后检查总情况。 AC代码：12345678910111213141516171819202122232425262728293031323334353637383940#include &lt;iostream&gt;using namespace std;int add(int m[], int n)&#123; int i = 0; int result = 0; for(int i = n; i &lt; n + 5; i++) &#123; result = result + m[i]; &#125; return result;&#125;int main()&#123; int d, s; int month[12]; while(cin &gt;&gt; s &gt;&gt; d) &#123; for(int i = 1; i &lt;= 12; i++) &#123; month[i] = s; &#125; for(int i = 1; i &lt;= 8; i++) &#123; for(int j = 1; j &lt;= 5; j++) &#123; int flag = add(month, i); if(flag &gt; 0) &#123; month[i + 5 - j] = -d; &#125; else break; &#125; &#125; int surplus = 0; for(int i = 1; i &lt;= 12; i++) &#123; surplus += month[i]; &#125; if(surplus &gt; 0) &#123; cout &lt;&lt; surplus &lt;&lt; endl; &#125; else cout &lt;&lt; "Deficit" &lt;&lt; endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>POJ</category>
      </categories>
      <tags>
        <tag>POJ</tag>
      </tags>
  </entry>
</search>
